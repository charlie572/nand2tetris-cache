// Cache lines are 64 bytes or 4 words long.
// There are 8 lines in the cache.
// The cache is 2-way set-associative.

CHIP SetAssociativeCache {
    IN in[16], addressIn[15], loadIn, memoryIn[16];
    OUT out[16], finished, addressOut[15], memoryOut[16], loadOut;

    PARTS:
    // check for hit
    Equal16(a[0..9]=tag1, b[0..9]=addressIn[5..14], out=tagCheck1);
    And(a=tagCheck1, b=valid1, out=hit1);

    Equal16(a[0..9]=tag2, b[0..9]=addressIn[5..14], out=tagCheck2);
    And(a=tagCheck2, b=valid2, out=hit2);

    Or(a=hit1, b=hit2, out=hit);
    Not(in=hit, out=miss);

    // output data
    Not(in=loadIn, out=notLoadIn);
    And(a=hit, b=notLoadIn, out=outputData);
    Mux16(a=false, b=data, sel=outputData, out=out);

    // cache miss
    And(a=miss, b=NoLoadOrWritten, out=readingLine);
    PC(inc=readingLine, reset=endCacheMiss, out[0..1]=wordSelect);
    DMux4Way(in=readingLine, sel=wordSelect, a=dataLoad00, b=dataLoad10, c=dataLoad20, d=dataLoad30);
    Equal16(a[0..1]=true, b[0..1]=wordSelect, out=endCacheMiss);

    // write through
    And(a=UnprocessedWrite, b=hit, out=WriteThroughToCache);
    DMux4Way(in=WriteThroughToCache, sel=addressIn[0..1], a=dataLoad01, b=dataLoad11, c=dataLoad21, d=dataLoad31);

    Mux16(a=in, b=false, sel=NoLoadOrWritten, out=memoryOut);

    DFF(in=loadIn, out=written);

    Or(a=notLoadIn, b=written, out=NoLoadOrWritten);
    Not(in=NoLoadOrWritten, out=UnprocessedWrite, out=loadOut);
    And(a=hit, b=NoLoadOrWritten, out=finished);

    // addressOut
    Mux16(a[0..1]=wordSelect, a[2..14]=addressIn[2..14], b=false, sel=hit, out=gatedReadMissAddress);
    Mux16(a=gatedReadMissAddress, b[0..14]=addressIn, sel=UnprocessedWrite, out[0..14]=addressOut);

    




    // ******************* memory ********************

    // cache data

    Or(a=dataLoad00, b=dataLoad01, out=dataLoad0);
    Or(a=dataLoad10, b=dataLoad11, out=dataLoad1);
    Or(a=dataLoad20, b=dataLoad21, out=dataLoad2);
    Or(a=dataLoad30, b=dataLoad31, out=dataLoad3);

    // Choose which of the two location in the set to store in.
    Mux(a=invalid1, b=hit1, sel=hit, out=loadSelect);
    DMux(in=dataLoad0, sel=loadSelect, a=dataLoadb0, b=dataLoada0);
    DMux(in=dataLoad1, sel=loadSelect, a=dataLoadb1, b=dataLoada1);
    DMux(in=dataLoad2, sel=loadSelect, a=dataLoadb2, b=dataLoada2);
    DMux(in=dataLoad3, sel=loadSelect, a=dataLoadb3, b=dataLoada3);

    Mux16(a=memoryIn, b=in, sel=UnprocessedWrite, out=cacheDataIn);

    RAM8(in=cacheDataIn, load=dataLoada0, address=addressIn[2..4], out=outDataA0);
    RAM8(in=cacheDataIn, load=dataLoada1, address=addressIn[2..4], out=outDataA1);
    RAM8(in=cacheDataIn, load=dataLoada2, address=addressIn[2..4], out=outDataA2);
    RAM8(in=cacheDataIn, load=dataLoada3, address=addressIn[2..4], out=outDataA3);

    RAM8(in=cacheDataIn, load=dataLoadb0, address=addressIn[2..4], out=outDataB0);
    RAM8(in=cacheDataIn, load=dataLoadb1, address=addressIn[2..4], out=outDataB1);
    RAM8(in=cacheDataIn, load=dataLoadb2, address=addressIn[2..4], out=outDataB2);
    RAM8(in=cacheDataIn, load=dataLoadb3, address=addressIn[2..4], out=outDataB3);

    // Choose which of the two locations in the set to read from.
    Mux4Way16(a=outDataA0, b=outDataA1, c=outDataA2, d=outDataA3, sel=addressIn[0..1], out=data1);
    Mux4Way16(a=outDataB0, b=outDataB1, c=outDataB2, d=outDataB3, sel=addressIn[0..1], out=data2);
    Mux16(a=data1, b=data2, sel=hit2, out=data);

    // tags
    DMux(in=endCacheMiss, sel=loadSelect, a=loadTag2, b=loadTag1);
    RAM8(in[0..9]=addressIn[5..14], load=loadTag1, address=addressIn[2..4], out[0..9]=tag1);
    RAM8(in[0..9]=addressIn[5..14], load=loadTag2, address=addressIn[2..4], out[0..9]=tag2);

    // valid bits
    DMux(in=endCacheMiss, sel=loadSelect, a=setValid2, b=setValid1);
    RAM8(in[0]=true, load=setValid1, address=addressIn[2..4], out[0]=valid1);
    RAM8(in[0]=true, load=setValid2, address=addressIn[2..4], out[0]=valid2);
    Not(in=valid1, out=invalid1);
    Not(in=valid2, out=invalid2);
}
